generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model GuildPreferences {
  id                           String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId                      String   @unique
  repEnabled                   Boolean  @default(false)
  repDisabledChannelIds        String[]
  hotmSessionOngoing           Boolean? @default(false)
  modlogChannelId              String?
  generalLogsChannelId         String?
  actionRequiredChannelId      String?
  welcomeChannelId             String?
  confessionsChannelId         String?
  confessionApprovalChannelId  String?
  hostSessionApprovalChannelId String?
  countingChannelId            String?
  hotmResultsChannelId         String?
  hotmResultsEmbedId           String?
  hostSessionChannelId         String?
  archiveSessionCategoryId     String?
  modmailCreateChannelId       String?
  modmailThreadsChannelId      String?
  modmailLogsChannelId         String?
  closedDmChannelId            String?
  banAppealFormLink            String?
  moderatorRoleId              String?
  forcedMuteRoleId             String?
  welcomeChannelMessage        String?
  welcomeDMMessage             String?
  groupStudyChannelId          String?
  keywordRequestChannelId      String?
  tagResourceApprovalChannelId String?
}

model Reputation {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String
  rep     Int
  guildId String

  @@unique([guildId, userId])
}

model HOTM {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  helperId String
  guildId  String
  votes    Int    @default(0)

  @@unique([guildId, helperId])
}

model HOTMBlacklist {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  helperId  String
  guildId   String
  permanent Boolean @default(false)

  @@unique([guildId, helperId])
}

model HOTMUser {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String
  guildId String
  voted   String[]

  @@unique([guildId, userId])
}

model Punishment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  actionAgainst String
  actionBy      String
  when          DateTime
  guildId       String
  caseId        Int
  reason        String?
  points        Int
  action        String
  duration      Int?
}

model StudyChannel {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  guildId         String
  channelId       String @unique
  helperRoleId    String
  studyPingRoleId String @unique
}
